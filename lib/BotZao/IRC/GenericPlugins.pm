package BotZao::IRC::GenericPlugins;

use v5.20;
use warnings;
use strict;
use utf8;

use feature qw(signatures);
no warnings qw(experimental::signatures);

use Data::Dumper;
use Encode qw(decode);
use Encode::Guess;

use Bot::IRC;

use BotZao::Commands;
use BotZao::Log qw(log_debug log_info log_error);
use BotZao::Plugins::Core;

# This generic plugin has the intent to load all generic plugins available:
# 1. register a catch-all hook
# 2. run through all generic plugins enabled by the user
# 2.1. check if text matches the trigger condition
# 2.2.1 in case it matches, execute the plugin and stop the loop
# 2.2.2 otherwise, continue to the next plugin
# 3. return control to Bot-IRC 

my $cmd_prefix = BotZao::Commands::prefix();
my @generic_plugins;

sub init(@args) {
	my $bot = shift @args;

	# Catch-all command (!.*) hook
	$bot->hook(
		{
			to_me => 0,
			text => qr/(?<command>${cmd_prefix}.*)/,
		},
		sub {
			my ( $bot, $in, $m ) = @_;

			log_debug("generic plugin event generated by " . $in->{nick});
			log_debug("generic plugin command: " . $m->{command});

			foreach my $plugin (@generic_plugins) {
				# Check for matching generic plugin trigger text
				if ($m->{command} =~ /$plugin->{trigger}/) {
					log_debug("plugin triggered: " . Dumper($plugin));
					my $ret = $plugin->{run}->($in->{nick});
					return 1 if $ret->{ret_val_count} == 0;

					foreach (0 .. ($ret->{ret_val_count} - 1)) {
						my $line = $ret->{ret_val}->[$_];
						$bot->reply("" . $line);
					}
					return 1;
				}
			}
			log_info("no generic plugin triggered by: " . $m->{command});
			return;
		},
	);
	return;
}

sub load(@plugins) {
	log_debug("genericplugins: load " . Dumper(@plugins));
	@generic_plugins = @plugins;
}

1;
